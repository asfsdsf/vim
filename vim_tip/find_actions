~/Software/vim/vim_tip/find_actions
g;          Go to last edited location
<c-^>       Switch to next buffer tab
<a-n>       Switch to next buffer tab
<a-p>       Switch to previous buffer tab
gt          Go to next tab
:tabnew     Open new tab
gT          Go to previous tab
\           Easymotion: prefix key of easy motion (\ is <leader>)
s
\s          Easymotion: find char bidirection
\f          Easymotion: find char in all windows
\j          Easymotion: go to line
\k          Easymotion: go to line
\w          Easamotion: go to word
\n          Easamotion: go to matches
<c-f>       Search by lines using CtrlP(Find Strings everywhere)
<c-d>       Ctrlp: toggle between the string mode and full regexp mode.
<c-t>       Ctrlp: Open the selected file in a new 'tab'.
<c-v>       Ctrlp: Open the selected file in a 'vertical' split.
<c-r>       Ctrlp: toggle regexp search 
<c-d>       Ctrlp: toggle search by file name
<c-s>       Ctrlp: Open the selected file in a 'horizontal' split.
<Space>/    Search by lines using Ag in current working directory(Find Strings everywhere)
<c-w><c-_>  Expand current split vertically
<c-w><c-|>  Expand current split horizontally
<c-w><c-w>  Switch to next split
<c-w>v      Split current window vertically
<c-w>s      Split current window horizontally
<c-w>H      Move the current window(split) to the "far left"
<c-w>J      Move the current window(split) to the "far down"
<c-w>K      Move the current window(split) to the "far up"
<c-w>L      Move the current window(split) to the "far right"
<c-w>h      Move to the "far left" window(split)
<c-w>j      Move to the "far down" window(split)
<c-w>k      Move to the "far up" window(split)
<c-w>l      Move to the "far right" window(split)
<c-t>       Open in new tab(CtrlP or fzf)
<a-a>       Fzf: Select all. (Then <enter> to open quickfix window with all selections to easily open them)
<a-d>       Fzf: Deselect all.
<c-m>       Open ctags
<a-s-j>     Multiple cursor: (normal,visual-multi) Add multiple cursor below(down)
<a-s-k>     Multiple cursor: (normal,visual-multi) Add multiple cursor above(up)
<c-n>       Multiple cursor: (normal,visual-multi) Find and extend multiple cursor in visual mode
1           Multiple cursor: (visual-multi) Add number(default 1/2/ means 1 3 5 ...)
z<          Multiple cursor: (visual-multi) align at cursors by character
]           Multiple cursor: (visual-multi)find next
[           Multiple cursor: (visual-multi)find previous
g/          Multiple cursor: (normal) start regex search
<a-s-a>     Multiple cursor: (normal,visual,visual-multi) select all that match pattern
<tab>       Multiple cursor: (visual-multi) change match case type
Q           Multiple cursor: (visual-multi-visual) cancel current selection
q           Multiple cursor: (visual-multi-visual) cancel current selection in cursor mode and ignore curret selection and find the next in visual mode
<c-LeftMouse>    Multiple cursor: (normal,visual-multi) add cursor at clicked position
<c-RightMouse>   Multiple cursor: (normal,visual-multi) select clicked word
<M-C-RightMouse> Multiple cursor: (normal,visual-multi) select all lines between mouse click and current cursor
:set mouse=a    Enable mouse mode
h           Move left
j           Move down
k           Move up
l           Move right
gg          Go to beginning of file
G           Go to end of file
ngg         Go to nth line
:noh        cancel all current highlight
:r!command  execute external command and read output to current buffer
o: open in prev window
t           NerdTree: Open in new tab
<Space>0    Open NerdTree
go          NerdTree: preview   (File node mappings) 
t           NerdTree: open in new tab   (File node mappings) 
T           NerdTree: open in new tab silently   (File node mappings) 
i           NerdTree: open split   (File node mappings) 
gi          NerdTree: preview split   (File node mappings) 
s           NerdTree: open vsplit   (File node mappings) 
gs          NerdTree: preview vsplit   (File node mappings) 
o           NerdTree: open & close node   (Directory node mappings) 
O           NerdTree: recursively open node   (Directory node mappings) 
t           NerdTree: open in new tab   (Directory node mappings) 
T           NerdTree: open in new tab silently   (Directory node mappings) 
R           NerdTree: Refresh current root directory
r           NerdTree: Refresh cursor directory
x           NerdTree: close parent of node   (Directory node mappings) 
X           NerdTree: close all child nodes of current node recursively   (Directory node mappings) 
e           NerdTree: explore selected dir   (Directory node mappings) 
m           NerdTree: open nerdtree menu to do some operation(Create dir,delete dir,open in system software...)
<Space>en   Go to next error
<Space>en   Go to previous error
<c-/><c-/>  Comment the line
<c-y>       YouCompleteMe(YCM): comfirm selection
<c-e>       YouCompleteMe(YCM): cancel completion and redisplay origin word
<c-v>       snippets: trigger snippets
<c-f>       snippets: jump forward to fill in items
<c-b>       snippets: jump backward to fill in items
<c-o>       Jump back to previous visited location
<c-i>       Jump forward to next visited location
L           Go to buttom of screen
H           Go to top of screen
M           Go to middle of screen
%           Go to the match character of the pair
vim -R      Open file by vim as read-only mode(can make changes,but can't save)
vim -M      Open file by vim as read-only mode(can not make changes)
vim +n      Open file and go to the nth line
vim +/str   Go to the first match of the str pattern
vim +?str   Go to the last match of the str pattern
<S-right>   Go to begining of next word
<S-left>    Go to begining of previous word
ma          Bookmark the current location with name 'a'
`a          Jump to the exact location of bookmark 'a'
'a          Jump to the beginning of the line containing the bookmark 'a'
mA          Bookmark the current location with name 'a' globally
:marks      Display all bookmarks
`"          Go to the position where you did last edit before exit
`.          Go to the position of where the last change was made
`^          Go to the position where the cursor was the last time when exiting insert mode
gv          Start Visual mode with the same area as the previous area and the same mode.
:'<,'>      Type : in visual mode to invoke this command.Execute command to manipulate the selected text
D           Delete using system register
Y           Yank using system register
<C-r>       Paste content of the subsequent register (used in inserting).
<A-h>       Move left in insert mode
<A-j>       Move down in insert mode
<A-k>       Move up in insert mode
<A-l>       Move right in insert mode
<A-H>       Move to left split
<A-J>       Move to down split
<A-K>       Move to up split
<A-L>       Move to right split
<c-R>       To find a string under working directory
PythonPrint Open odd python file to edit a python program to print.Press again to exit and print
[[          Go to preious function
]]          Go to next function
[]          Go to end of previous function
][          Go to end of next function
/           Search forward
?           Search backward
.           Concat two strings in ex mode
".          Register for last inserted text
<a-h>       Insert mode: move the last word(<c-left>)
<a-j>       Insert mode: add new line below and go to that(<c-o>o)
<a-k>       Insert mode: add new line above and go to that(<c-o>O)
<a-l>       Insert mode: move the previous word(<c-right>)
<c-h>       Insert mode: move to left(<left>)
<c-j>       Insert mode: move to down(<down>)
<c-k>       Insert mode: move to up(<up>)
<c-l>       Insert mode: move to right(<right>)
<c-b>       Insert mode: move to the end(<c-o>^)
<c-e>       Insert mode: move to the start(<c-o>$)
<c-p>       Insert mode: paste(<c-o>p)
<c-d>       Insert mode: delete(<c-o>d)
<space>r    Run current python file(write automatically)
cs          Vim-Surround: change surround type t1 to t2 with motion
ds          Vim-Surround: delete surround type t
ys          Vim-Surround: add surround type t with motion
yss         Vim-Surround: add surround around the sentence
DiffSaved   Difference between buffer and file
CompareClipboard    Check difference between current buffer and clipboard
zz          Scroll the current line to the center of the window
<c-h>       Replace (replace strings in current buffer)
(y/n/a/q/l/^E/^Y),Replace keymap for gc: y: yes one match, n: no one match, a: all matched, q: quit replace, l: yes one match then quit, ^E and ^Y: scroll 
*<c-h>/     Replace word under cursor
SPC ag      Open current file with gedit
SPC au      Open undo tree
SPC as      Open terminal
:set wrap!  Turn off soft wrap
:set wrap   Turn on soft wrap
SPC tw      Toggle soft wrap for all panes
:!python    Run selected code by python (in visual mode)
<c-r>"      Paste in ex mode (command mode)
:cd %:p:h   Set current directory to working directory (mapped to SPC cd)
=           Is an operator (by default, it formats/indents text).
SPC yf      YouCompleteMe(YCM): fix it of ycm
SPC yr      YouCompleteMe(YCM): restart server
SPC yg      YouCompleteMe(YCM): generate .ycm_extra_conf.py according to CMakeLists.txt
SPC yd      YouCompleteMe(YCM): go to documentation
SPC yb      YouCompleteMe(YCM): go to definition/declaration
c-b         YouCompleteMe(YCM): go to definition/declaration
c-]         ctags: go(jump) to symbol
c-t         ctags: go(jump) back symbol to definition
:!ctags -R    ctags: generate tags
SPC gs      Git: git status (show status)
SPC gd      Git: diff with HEAD
SPC gc      Git: git commit
SPC gfm     Git: git move
SPC gfr     Git: git remove
SPC ga      Git: git add(stage)
SPC gb      Git: show git commit time in detail(every line)
SPC gr      Git: git unstage(revert)
SPC gl      Git: git browse history. see commit log. show all commit
[c          Git: show next hunk(next change with HEAD in file)
]c          Git: show previous hunk(next change with HEAD in file)
SPC gn      Git: (in git log)show next commit of current file
[q          Git: (in git log)show next commit of current file
SPC gp      Git: (in git log)show previous commit of current file
SPC gN      Git: (in git log)show previous commit of current file
]q          Git: (in git log)show previous commit of current file
-	        Git: (in git status)add/reset file (works in visual mode too)
<Enter>	    Git: (in git status)open current file in the window below
p	        Git: (in git status)run `git add –patch` for current file
cc          Git: (in git status)invoke :Gcommit
c?          Git: (in git status)show help for git status commands
:Gblame     Git: git blame,Show details about change time of every line
SPC fo      Open file under the cursor with default system software
SPC ft      Open the terminal with current file path as working directory
SPC fd      Open the folder containing current file
:e!<CR>     Refresh changed content of file(buffer) opened in vi(m)
SPC pf      Fuzzy search/find current working directory(project file)
<c-w> T     Move current window to new tab
,cc         Run c,cpp file(Support CMakeLists)
,cp         Run c,cpp file(Support CMakeLists) with mpirun (Use :SetMpiProcessors to set mpirun -n num)
,cm         Make c,cpp file(Support CMakeLists)
gf          Edit file under the cursor with nvim in current window
gd          Go to definition
<c-g>       Show current file path
<c-n>       Vim-gdb: frame down(next frame)
<c-p>       Vim-gdb: frame up(previous frame)
<F8>        Vim-gdb: set breakpoint at the cursor line
,f          Format file
<c-o>       Switch between select mode and visual mode
SPC hc      Translate between Chinese and English
:set mouse=a Enable mouse
q/          Open search history in command-line window. And edit to search with auto-completion
q:          Open command history in command-line window. And edit to execute with auto-completion
c-f         In command/Ex mode, enter command-line window to edit with auto-completion
c-n         In insert mode, search for all buffers to autocomplete
SPC :       Vimux: promt to run command
SPC vp      Vimux: run repl in current buffer
SPC vr      Vimux: rerun previous command
SPC vo      Vimux: open pane in tmux if there is only one pane
SPC vc      Vimux: close pane that is opened by SPC vo command
SetMpiProcessors    Set the numer of mpi processors for mpirun when execute c/cpp using ,cp command
SPC ls      Save layout(session) with dir base name as layout(session) name
SPC lS      Save layout(session) with user input as layout(session) name
SPC lr      Load layout(session) with dir base name as layout(session) name
SPC lR      Load layout(session) with prompt window for help to choose
A-u         Previous vim pane or tmux pane
A-z         Toggle maximize panes in tmux
zM          Folding: fold all
zR          Folding: unfold all
SPC z-      Folding: fold all
SPC z+      Folding: unfold all
zj          Folding: go to next fold
zk          Folding: go to previous fold
A-s         Latex: (visual mode) save abbreviation
A-s         Latex: (normal, insert mode) jump to abbreviation, (Press A-s again will jump back)
A-r         Latex: jump to bibtex (Press A-r again will jump back)
,i          Latex: show latex information
,b          Latex: toggle latex autocompile
,v          Latex: view and jump to pdf
,e          Latex: show latex errors
c-j         Latex: (insert mode) insert _{}<left>
c-k         Latex: (insert mode) insert ^{}<left>
c-o         Latex: (insert mode) insert $$<left>
c-b         Latex: (insert mode) insert \textbf{}<left>
SPC ss      Cscope: symbol: find all references to the token under cursor
SPC sg      Cscope: global: find global definition(s) of the token under cursor
SPC sc      Cscope: calls:  find all calls to the function name under cursor
SPC st      Cscope: text:   find all instances of the text under cursor
SPC se      Cscope: egrep:  egrep search for the word under cursor
SPC sf      Cscope: file:   open the filename under cursor
SPC si      Cscope: includes: find files that include the current file
SPC sd      Cscope: called: find functions that function under cursor calls
