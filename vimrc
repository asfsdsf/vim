" This is old vimrc file.
" Switch to vimrc generated by bootstrap from now on.

if has('nvim')
    let b:plug_path='~/.nvim/plugged'
    let b:dot_file_path='~/Software/vim/vimrc'
else
    let b:plug_path='~/.vim/plugged'
    let b:dot_file_path='~/Software/vim/vimrc'
endif

set nocompatible              " be improved, required
set encoding=utf8 
"""" START vim-plug Configuration

" set the runtime path to include vim-plug and initialize
call plug#begin(b:plug_path)
""" All of your Plugins must be added before the following line

" Utility
Plug '~/Software/vim/plugins/toggle_maximize.vim/'  " toggle maximize window
Plug 'scrooloose/nerdtree'  " file tree
Plug 'majutsushi/tagbar'  " file names at top bar
Plug 'ervandew/supertab'  " perform all your vim insert mode completions with Tab
Plug 'junegunn/fzf.vim'  " fuzzy find
Plug 'junegunn/fzf'  " fuzzy find together with plugin above
Plug 'easymotion/vim-easymotion'  " Vim motions on speed! http://www.vim.org/scripts/script.phpâ€¦
Plug 'mbbill/undotree'  " show undo history
" To recompile YouCompleteMe, run:
" python3 install.py --clang-completer --ts-completer --java-completer
" python3 install.py --clangd-completer --ts-completer --java-completer
" Note that clangd is still in heavy development.
" in ~/.vim/plugged/YouCompleteMe for vim
" in ~/.nvim/plugged/YouCompleteMe for nvim
Plug 'Valloric/YouCompleteMe'  " auto complete engine
" generate .ycm_extra_conf.py file according to CMakeList.txt for YouCompleteMe
Plug 'rdnetto/YCM-Generator',{ 'branch': 'develop'} 
" Plug 'tenfyzhong/CompleteParameter.vim'  " Complete parameter after select the completion. Integration with YouCompleteMe(ycm), deoplete, neocomplete.
Plug 'Shougo/vimproc.vim', {'do' : 'make'}  " Interactive command execution in Vim.
Plug 'Shougo/deol.nvim'  " shell interface for NeoVim and Vim8.
" Plug 'Shougo/vimshell.vim'  " shell interface for NeoVim and Vim8.
Plug 'benmills/vimux'  " vim plugin to interact with tmux
Plug 'ctrlpvim/ctrlp.vim'  " Fuzzy file, buffer, mru, tag, etc finder.
" Plug 'terryma/vim-multiple-cursors'  " Sublime Text style multiple selections for Vim
Plug 'mg979/vim-visual-multi',  " Sublime Text style multiple selections for Vim
Plug 'terryma/vim-expand-region'  " Expand region like emacs
Plug 'mtth/scratch.vim'  " Unobtrusive scratch window
" Plug 'w0rp/ale'  " Syntax checking for python
if has('nvim')
    Plug 'sakhnik/nvim-gdb', { 'do': ':UpdateRemotePlugins' }
else
    packadd termdebug
endif
Plug 'Chiel92/vim-autoformat'  " Provide easy code formatting in Vim by integrating existing code formatters.
Plug 'neomake/neomake'  " Asynchronous linting and make framework for Neovim/Vim (auto async make)
Plug 'wellle/targets.vim' " Vim plugin that provides additional text objects
Plug 'sbdchd/neoformat' " A (Neo)vim plugin for formatting code.
Plug 'tpope/vim-fugitive' " A git wrapper for vim
Plug 'ianva/vim-youdao-translater' " translation plugin for vim  http://ianva.github.com

" Language support
Plug 'mattn/emmet-vim'  " for html

" Generic Programming Support
" Plug 'Raimondi/delimitMate' " enable an auto-close chars feature
" Plug 'jiangmiao/auto-pairs' " enable an auto-close chars feature
Plug 'Raimondi/delimitMate'  " enable an auto-close chars feature
Plug 'tomtom/tcomment_vim'  " extensible & universal comment vim-plugin that also handles embedded filetypes
Plug 'tpope/vim-surround'  " surround.vim: quoting/parenthesizing made simple
Plug 'SirVer/ultisnips'  " Track the engine.
Plug 'honza/vim-snippets'  " Snippets are separated from the engine. Add this if you want them:

" Theme / Interface
Plug 'vim-airline/vim-airline'  " beautiful bar at bottom
Plug 'vim-airline/vim-airline-themes'  " beautiful bar at bottom
Plug 'ryanoasis/vim-devicons'  " iconize symbols
Plug 'morhetz/gruvbox'  "retro groove color scheme for Vim
Plug 'mhinz/vim-startify'  " The fancy start screen for Vim.

" The following theme is copied from https://coderoncode.com/tools/2017/04/16/vim-the-perfect-ide.html
" And I don't clearly know their specific functionality
Plug 'sjl/badwolf'
Plug 'tomasr/molokai'
Plug 'zenorocha/dracula-theme', {'rtp': 'vim/'}
Plug 'junegunn/limelight.vim'
Plug 'mkarmona/colorsbox'
Plug 'romainl/Apprentice'
Plug 'Lokaltog/vim-distinguished'
Plug 'chriskempson/base16-vim'
Plug 'w0ng/vim-hybrid'
Plug 'AlessandroYorba/Sierra'
Plug 'daylerees/colour-schemes'
Plug 'effkay/argonaut.vim'
Plug 'ajh17/Spacegray.vim'
Plug 'atelierbram/Base2Tone-vim'
Plug 'colepeters/spacemacs-theme.vim'


" required
call plug#end()
" Put your non-Plugin stuff after this line
"""""""""""""""""""""""""""""""""""""
" Initialization
"""""""""""""""""""""""""""""""""""""
autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"""""""""""""""""""""""""""""""""""""
" display
"""""""""""""""""""""""""""""""""""""
set showcmd                          "show key strokes

" Show linenumbers
set number relativenumber
set ruler " Always show cursor position

" Enable highlighting of the current lines
set cursorline

" Theme and Styling
set t_Co=256
set background=dark

set foldmethod=indent
set foldnestmax=10
set nofoldenable

set mouse=a

" conflict config for nvim and vim
if(!has("nvim"))
    " Use system clipboard
    set clipboard^=unnamed,unnamedplus
    " Prevent Vim from clearing the clipboard on exit
    autocmd VimLeave * call system("xsel -ib", getreg('+'))
    " conlict with tmux(color will be gone without this)
    if exists('+termguicolors')
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        set termguicolors
    endif
else
    set clipboard+=unnamedplus
endif

if (has("termguicolors"))
  set termguicolors
endif

let base16colorspace=256  " Access colors present in 256 colorspace
" colorscheme spacegray
" colorscheme spacemacs-theme
colorscheme gruvbox

let g:spacegray_underline_search = 1
let g:spacegray_italicize_comments = 1

let g:gruvbox_contrast = 'hard'

" Vim-Airline {{{
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_powerline_fonts = 1
    let g:airline_theme='hybrid'
    let g:hybrid_custom_term_colors = 1
    let g:hybrid_reduced_contrast = 1

    " add window number in front of the airline
    function! WindowNumber(...)
        let builder = a:1
        let context = a:2
        call builder.add_section('airline_b', '%{tabpagewinnr(tabpagenr())}')
        return 0
    endfunction

    call airline#add_statusline_func('WindowNumber')
    call airline#add_inactive_statusline_func('WindowNumber')
" }}}



" Devicons {{{
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
" }}}

"""""""""""""""""""""""""""""""""""""
" custom functin
"""""""""""""""""""""""""""""""""""""

function! s:Python_print()
    if expand('%:p')==$HOME."/Software/vim/python_for_vim.py"
        wq
        r !python $HOME/Software/vim/python_for_vim.py
    else
        vsplit $HOME/Software/vim/python_for_vim.py
        execute "normal!gg\"pdG"
"        echo "press P to use last python file"
    endif
endfunction
com! PythonPrint call s:Python_print()

" open and edit find actions file which provide useful keymaps.(Use <Space>aa to
" access the keymaps)
com! OpenFindActionsFile 12sp ~/Software/vim/vim_tip/find_actions

execute "com! OpenVimrcDotFile e " . b:dot_file_path

com! OpenTodoFile 12sp ~/Software/vim/TODO

com! OpenFlake8Config 12sp ~/.config/flake8

function! g:OpenFileByCtrlP()
    12sp $HOME/Software/vim/open_file_help.sh
    exec "normal! \<c-w>J"
    r!pwd
    exec "normal!k\"pdd"
    startinsert!
endfunction
nnoremap <Space>ff :call OpenFileByCtrlP()<CR>
nnoremap <Space>pf :FZF<CR>

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

function! s:OpenDirectoryFile(dir_path)
    12sp $HOME/Software/vim/open_file_help.sh
    exec "normal! \<c-w>J"
    put =a:dir_path
    exec "normal!k\"pdd"
    startinsert!
endfunction
com!OpenSoftwareInstallRecord call s:OpenDirectoryFile('~/Documents/Notes/software_installation_record')
com!OpenProgrammingNotes call s:OpenDirectoryFile('~/Documents/Notes/programming')
com!OpenCustomCommand call s:OpenDirectoryFile('~/Programming/shell/command')
com!OpenBashComplete call s:OpenDirectoryFile('~/Programming/shell/autocomplete/my_complete')
com!OpenZshComplete call s:OpenDirectoryFile('~/Software/zsh/completion')
com!OpenGraduateStudy call s:OpenDirectoryFile('~/Documents/learn/study')

function! s:Compared_with_clipboard()
    diffthis
    vnew ~/Software/vim/clipboard
    execute 'normal!gg"_dG"+P'
    execute 'w'
    diffthis
endfunction
com!CompareClipboard call s:Compared_with_clipboard()
" exit diff mode after closing clipboard
autocmd QuitPre ~/Software/vim/clipboard :diffoff
" auto update difference
autocmd TextChanged ~/Software/vim/clipboard :diffupdate



"""""""""""""""""""""""""""""""""""""
" Mappings configurationn
"""""""""""""""""""""""""""""""""""""

"{{{ vim-multiple-cursor Mappings 
    " vim-visual-multi Mappings
    " let g:VM_no_meta_mappings=0
    let g:VM_mouse_mappings = 1
    let g:VM_maps = {}
    let g:VM_maps["Mouse Cursor"]                = '<C-LeftMouse>'
    let g:VM_maps["Mouse Word"]                  = '<C-RightMouse>'
    let g:VM_maps["Mouse Column"]                = '<M-C-RightMouse>'
    " let g:VM_maps["Select Operator"]          = 'gs'
    " let g:VM_maps["Add Cursor At Pos"]        = 'g<space>'
    " let g:VM_maps["Start Regex Search"]       = 'g/'
    " let g:VM_maps["Select All"]               = '<leader>A'
    let g:VM_maps["Add Cursor Down"]            = '<A-C-j>'
    let g:VM_maps["Add Cursor Up"]              = '<A-C-k>'
    let g:VM_maps["Numbers"]                    = '<A-n>'
    let g:VM_maps["Visual Regex"]               = 'g/'
    " let g:VM_maps["Visual All"]               = '<A-A>'
    " let g:VM_maps["Visual Add"]               = '<A-a>'
    " let g:VM_maps["Visual Find"]              = '<C-f>'
    " let g:VM_maps["Visual Cursors"]           = '<C-c>'
    " let g:VM_maps["Find Under"]               = '<c-n>'
    " let g:VM_maps["Find Subword Under"]       = '<c-n>'
    if has('nvim')

    else
        
    endif
    vmap <A-j> g/^<CR><tab>

"}}}


"{{{ tagbar & NERDTree
    map <Space>0 :NERDTreeToggle<CR>
    map <Space><CR> :TagbarToggle<CR>
    map <A-m> :TagbarToggle<CR>
"}}}


"{{{ fugitive Mappings
    " git status
    nnoremap <Space>gs :Gstatus<CR>
    " in Gstatus window:
    " -	        add/reset file (works in visual mode too)
    " <Enter>	open current file in the window below
    " p	        run `git add â€“patch` for current file
    " C	        invoke :Gcommit
    nnoremap <Space>gd :Gvdiffsplit<CR>
    nnoremap <Space>gc :Gcommit<CR>
    nnoremap <Space>gfm :Gmove<CR>
    nnoremap <Space>gfr :Gremove<CR>
    " revert current file
    nnoremap <Space>gr :Gread<CR>
    " stage current file
    nnoremap <Space>ga :Gwrite<CR>
    " show commit time
    nnoremap <Space>gb :Gblame<CR>
    nnoremap <Space>gl :let g:glog_cursor=line(".")<CR>:0Glog<CR>
    nnoremap <Space>gn :cnext<CR>
    nnoremap [q :cnext<CR>
    nnoremap <Space>gp :cprev<CR>
    nnoremap ]q :cprev<CR>
    nnoremap <Space>gN :cprev<CR>
"}}}


"{{{ YouCompleteMe Mappings
    nnoremap <Space>yb :YcmCompleter GoTo<CR>
    nnoremap <Space>yB :YcmCompleter GoToDeclaration<CR>
    nnoremap <Space>yd :YcmCompleter GetDoc<CR>
    nnoremap <Space>yf :YcmCompleter FixIt<CR>
    nnoremap <Space>yr :YcmRestartServer<CR>
    " Note here replace of FlagsForFile is due to use of clangd.
    nnoremap <Space>yg :![[ -e CMakeLists.txt ]] && rm .ycm_extra_conf.py<CR>:YcmGenerateConfig<CR>:!sed -i 's/FlagsForFile/Settings/g' .ycm_extra_conf.py<CR>
    " <c-e> :cancel completion
"}}}


"{{{ Mapping selecting Mappings
    nmap <leader><tab> <plug>(fzf-maps-n)
    xmap <leader><tab> <plug>(fzf-maps-x)
    omap <leader><tab> <plug>(fzf-maps-o)
"}}}


"{{{ Insert mode completion
    imap <c-x><c-k> <plug>(fzf-complete-word)
    imap <c-x><c-f> <plug>(fzf-complete-path)
    imap <c-x><c-j> <plug>(fzf-complete-file-ag)
    imap <c-x><c-l> <plug>(fzf-complete-line)

    " Advanced customization using autoload functions
    inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '14%'})
"}}}


" autocmd InsertLeave * :update

"{{{ directly use s to perform surround
    nmap s ys
"}}}


"{{{ Moving in insert mode

    inoremap <A-h> <c-left>
    inoremap <A-j> <c-o>o
    inoremap <A-k> <c-o>O
    inoremap <A-l> <c-right>
    
    inoremap <c-h> <left>
    inoremap <c-j> <down>
    inoremap <c-k> <up>
    inoremap <c-l> <right>
    
    inoremap <c-a> <c-o>^
    inoremap <c-e> <c-o>$
    
    inoremap <c-Space> <backspace>
    " inoremap <c-s-l> <delete>
    
    " inoremap <s-Enter> <Esc>o
    
    inoremap <c-p> <c-o>p
    inoremap <c-d> <c-o>d
"}}}


"{{{ Easier moving in tabs and windows
    nnoremap <A-right> gt
    nnoremap <A-left> gT
    nnoremap <A-J> <C-W>j
    nnoremap <A-K> <C-W>k
    nnoremap <A-L> <C-W>l
    nnoremap <A-H> <C-W>h
    " prevent conflict with tmux
    nnoremap <c-a> l
"}}}


"{{{ map for replacement
    nnoremap <c-h> :%s//gc<left><left><left>
    xnoremap <c-h> :s//gc<left><left><left>
    cnoremap <c-h> <CR>:%s///gc<left><left><left>
"}}}

    
"{{{ don't copy when using c and C to change text
    nnoremap c "9c
    nnoremap C "9C
    nnoremap x "9x
    nnoremap X "9X
"}}}


"{{{ filetype specific keymap
    " to see more filetype, run command :
    " echo join(map(split(globpath(&rtp, 'ftplugin/*.vim'), '\n'), 'fnamemodify(v:val, ":t:r")'), "\n")

    " Run to another window if in tmux mode. Else run directly
    fun! Run_to_tmux_or_directly(command_str)
        if exists('$TMUX')
            call VimuxRunCommand(a:command_str)
            call feedkeys("<CR>")
        else
            exec "!" . a:command_str
        endif
    endf

    " run current python buffer
    autocmd FileType matlab nnoremap <buffer> ,cc :w<CR>:!octave %<CR>
    autocmd FileType matlab nnoremap <buffer> ,cc :w<CR>:call Run_to_tmux_or_directly("octave " . expand("%:p"))<CR>
    autocmd FileType python nnoremap <buffer> ,cc :w<CR>:call Run_to_tmux_or_directly("python3 " . expand("%:p"))<CR>
    " c/c++ jump to
    autocmd FileType c,cpp nnoremap <buffer> <c-b> :YcmCompleter GoTo<CR>
    " python jumpy to
    autocmd FileType python nnoremap <buffer> <c-b> :YcmCompleter GoTo<CR>

    " run current c/cpp project
    autocmd FileType c,cpp nnoremap <buffer> ,cc :w<CR>:call Run_to_tmux_or_directly("cd ".expand('%:p:h')." && cmake_run ".expand('%:p')." --less-output")<CR>

    " run c/cpp with mpi
    autocmd FileType c,cpp nnoremap <buffer> ,cp :w<CR>:call Run_to_tmux_or_directly("cd ".expand('%:p:h')." && cmake_run ".expand('%:p')." --less-output --make-only")<CR>:call Run_to_tmux_or_directly("mpirun -n 4 `make_find_executable`")<CR>
    autocmd FileType c,cpp nnoremap <buffer> ,cm :w<CR>:call Run_to_tmux_or_directly("cd ".expand('%:p:h')." && cmake_run ".expand('%:p')." --make-only")<CR>

    autocmd BufRead,BufNewFile  CMakeLists.txt nnoremap <buffer> ,cc :w<CR>:call Run_to_tmux_or_directly("cd ".expand('%:p:h')." && cmake_run ".expand('%:t')." --less-output")<CR>"}}}
    autocmd BufRead,BufNewFile  CMakeLists.txt nnoremap <buffer> ,cm :w<CR>:call Run_to_tmux_or_directly("cd ".expand('%:p:h')." && cmake_run ".expand('%:t')." --make-only")<CR>
    autocmd BufRead,BufNewFile  CMakeLists.txt nnoremap <buffer> ,cp :w<CR>:call Run_to_tmux_or_directly("cd ".expand('%:p:h')." && cmake_run ".expand('%:p')." --less-output --make-only")<CR>:call Run_to_tmux_or_directly("mpirun -n 4 `make_find_executable`")<CR>

    if has('nvim')
        " debug current python buffer
        autocmd FileType python nnoremap <buffer> ,cd :w<CR>:cd %:h<CR>:GdbStartPDB python -m pdb <c-r>%<CR>
        " debug current bash buffer
        autocmd FileType sh nnoremap <buffer> ,cd :w<CR>:cd %:h<CR>:GdbStartBashDB bashdb <c-r>%<CR>
        " debug current c/cpp project
        autocmd FileType c,cpp nnoremap <buffer> ,cd :w<CR>:cd %:h<CR>:cd `git rev-parse --show-toplevel 2>/dev/null`<CR>:GdbStart gdb -q -command="$HOME/Software/vim/gdb_init" `make_find_executable` <CR>
        " debug current c/cpp project
        autocmd BufRead,BufNewFile  CMakeLists.txt nnoremap <buffer> ,cd :w<CR>:cd %:h<CR>:cd `git rev-parse --show-toplevel 2>/dev/null`<CR>:GdbStart gdb -q -command="$HOME/Software/vim/gdb_init" `make_find_executable` <CR>
    else
        autocmd FileType c,cpp nnoremap <buffer> ,cd :set mouse=a<CR>:w<CR>:cd %:h<CR>:cd `git rev-parse --show-toplevel 2>/dev/null`<CR>:exec "Termdebug " . system('make_find_executable')<CR><c-w>j<c-w>j<c-w>L:sleep 1<CR><c-w>hstart<CR>source .gdb_breakpoints<CR>
        " autocmd FileType c,cpp nnoremap <buffer> ,cd :set mouse=a<CR>:w<CR>:cd %:h<CR>:cd `git rev-parse --show-toplevel 2>/dev/null`<CR>:exec "Termdebug -command=~/Software/vim/gdb_init " . system('make_find_executable')<CR><c-w>j<c-w>j<c-w>L:sleep 1<CR><c-w>h
    endif

    " keymap for open_file_help file(e.g. Used to OpenTodoFile)
    autocmd BufRead,BufNewFile  $HOME/Software/vim/open_file_help.sh map <buffer> <esc> :bd!<CR>
    autocmd BufRead,BufNewFile  $HOME/Software/vim/open_file_help.sh imap <buffer> <c-h> <c-w><c-w>
    autocmd BufRead,BufNewFile  $HOME/Software/vim/open_file_help.sh inoremap <buffer> <CR> <c-o>:stopinsert<CR>:let mycurf=expand("<cfile>")<CR>:bd!<CR>:execute("e ".mycurf)<CR>
    
    " freefem++ file type
    au BufNewFile,BufRead *.edp setf edp
    au FileType  edp nnoremap ,cc :w<CR>:call Run_to_tmux_or_directly("cd ".expand('%:p:h')." && FreeFem++ ".expand('%:p'))<CR>

    " fugitive glog: auto jump to the same line
    au! BufLeave  fugitive://*  let g:glog_cursor=line(".")
    " au! BufEnter  fugitive://*  exec g:glog_cursor 
    au! BufEnter  fugitive://*  exec "if exists('g:glog_cursor')\n exec g:glog_cursor\n endif\n"

    " command-line window enter insert mode automatically
	au CmdwinEnter [:/?]  startinsert

    " Set filetype to be same with previous file when searching because
    " autocomplete will search all buffer with same filetype 
    au BufEnter * let g:previous_buf_filetype=&filetype
    au CmdwinEnter [/?]  exec "set filetype=" . g:previous_buf_filetype

    function! s:ChangeFileTypeIfReplacing()
        if stridx(getline('.'),"s/") >= 0
            exec "set filetype=" . g:previous_buf_filetype
        endif
    endfunction


    " Set filetype to be the same with previous file when replacing in
    " command-line mode
    au CmdwinEnter [:] call s:ChangeFileTypeIfReplacing()

    " execute the command under the cursor and then have the command-line window open again
	autocmd CmdwinEnter * map <buffer> <F5> <CR>q:

    " Debug mode auto command
	" au CmdwinEnter [>] do something

    function! VimEnterExec()
        if !exists("b:VimEterExecFlag")
            let b:VimEterExecFlag=0
        endif

        if b:VimEterExecFlag
            iunmap <buffer> <enter>
            vunmap <buffer> <enter>
            nunmap <buffer> <enter>
            let b:VimEterExecFlag=0
        else
            inoremap <buffer> <enter> <c-o>$<c-o>:exec getline(".")<CR><CR>
            vnoremap <buffer> <enter> "vy :@v<CR>
            nnoremap <buffer> <enter> :exec getline(".")<CR>j

            let b:VimEterExecFlag=1
        endif
    endfunction

    autocmd FileType vim nnoremap <space>vp :call VimEnterExec()<CR>
"}}}


"""""""""""""""""""""""""""""""""""""
" Map from spacemacs
"""""""""""""""""""""""""""""""""""""
" nunmap <Space>
nnoremap <Space><Space> :
nnoremap <Space>wh <C-w>h
nnoremap <Space>wj <C-w>j
nnoremap <Space>wk <C-w>k
nnoremap <Space>wl <C-w>l
nnoremap <Space>wH <C-w>H
nnoremap <Space>wJ <C-w>J
nnoremap <Space>wK <C-w>K
nnoremap <Space>wL <C-w>L
nnoremap <Space>w/ :vs<CR>
" map <ESC> to exit insert mode in shell buffer
" tnoremap <ESC>   <C-\><C-n>
nnoremap <Space>w- :sp<CR>
nnoremap <Space>ww <C-w>w
nnoremap <Space>w= <C-w>=
nnoremap <Space>wd :close<CR>
nnoremap <Space>wx :bp<cr>:silent! exec "bd #"<CR>:close<CR>
nnoremap <Space>wo <C-w><C-o>
nnoremap <c-down>  2<C-w>-
nnoremap <c-up>    2<C-w>+
nnoremap <c-left>  2<C-w><
nnoremap <c-right> 2<C-w>>
nnoremap <Space>1  1<C-w><C-w>
nnoremap <Space>2  2<C-w><C-w>
nnoremap <Space>3  3<C-w><C-w>
nnoremap <Space>4  4<C-w><C-w>
nnoremap <Space>5  5<C-w><C-w>
nnoremap <Space>6  6<C-w><C-w>
nnoremap <Space>7  7<C-w><C-w>
nnoremap <Space>8  8<C-w><C-w>
nnoremap <Space>9  9<C-w><C-w>
" insert dividing line
nnoremap <Space>id :r !echo "**********************************************"<CR>:TComment<CR>5l

nnoremap <Space>fr :CtrlPMRUFiles<CR>
" goto
" tags (symbols) in current file finder mapping
nnoremap ,gt :CtrlPBufTag<CR>
" tags (symbols) in all files finder mapping
nnoremap ,gT :CtrlPBufTagAll<CR>
" recent changes in current buffer
nnoremap ,gc :CtrlPChange<CR>
" recent changes in all buffers
nnoremap ,gC :CtrlPChangeAll<CR>
" TODO nnoremap ,gj CtrlpJumps

nnoremap <c-c><c-o> gf
" nnoremap <Space>fo :!nautilus "<cfile>"& <CR>
" open file under the cursor with default system software
nnoremap <Space>fo :!cd %:p:h && xdg-open "<cfile>" & <CR>
" open the folder containing current file
nnoremap <Space>fd :!nautilus %:p:h &<CR>
" open the terminal with current file path as working directory
nnoremap <Space>ft :!gnome-terminal --working-directory=%:p:h &<CR>
" nnoremap <Space>ff :CtrlP %<CR>
nnoremap <Space>ss :CtrlPLine %<CR>
nnoremap <Space><Tab> :b#<CR>
nnoremap ]e        :move +1<CR>
nnoremap [e        :move -2<CR>
" nnoremap <Space><Space> :
nnoremap <Space>fvd :OpenVimrcDotFile<CR>
execute "nnoremap <Space>fvR :source" . b:dot_file_path . "<CR>"
nnoremap <Space>mcc :w<CR>:!python %<CR>
nnoremap <Space>/  :Ag!<CR>
" map * to search selection
vnoremap * y/\V<C-R>=escape(@",'/\')<CR><CR>
nnoremap <Space>bd :bn<CR>:bd#<CR>
nnoremap <Space>bm :messages<CR>
nnoremap <Space>bn :bn<CR>
nnoremap <Space>bp :bp<CR>
nnoremap <Space>bb :CtrlPBuffer<CR>
nnoremap <Space>bs :Scratch<CR>
nnoremap <Space>bx :bp<cr>:silent! exec "bd #"<CR>:close<CR>

nnoremap <Space>qq :qa<CR>
nnoremap <Space>hd :help 
nnoremap <Space>cd :cd %:h<CR>:cd `git rev-parse --show-toplevel 2>/dev/null`<CR>
nmap <space>aa :FindActions<CR>
nmap <space>ag :!gedit %<CR>
nmap <space>au :UndotreeToggle<CR>
if has('nvim')
    nnoremap <space>as :terminal<CR>
else
    nnoremap <space>as :vertical terminal ++curwin<CR>
endif
" tnoremap <C-w> <C-\><C-n>
" tnoremap <C-w>h <C-\><C-n><C-w>h
" tnoremap <C-w>j <C-\><C-n><C-w>j
" tnoremap <C-w>k <C-\><C-n><C-w>k
" tnoremap <C-w>l <C-\><C-n><C-w>l
map <Space>v <Plug>(expand_region_expand)
function! OpenUrlUnderCursor()
    let path="/usr/bin/google-chrome-stable"
    execute "normal BvEy"
    let url=matchstr(@0, '[a-z]*:\/\/[^ >,;]*')
    if url != ""
        " silent exec "!open -a ".path." '".url."'" | redraw! 
        silent exec "!/usr/bin/google-chrome-stable '".url."'&" | redraw!
        echo "opened ".url
    else
        echo "No URL under cursor."
    endif
endfunction
nmap <c-c><c-o> :call OpenUrlUnderCursor()<CR>

"""""""""""""""""""""""""""""""""""""
" Configuration Section
"""""""""""""""""""""""""""""""""""""

" turn off key timeout
if has('nvim')
    set notimeout
else
" set alt map
function! Terminal_MetaMode(mode)
    set ttimeout
    if $TMUX != ''
        set ttimeoutlen=30
    elseif &ttimeoutlen > 80 || &ttimeoutlen <= 0
        set ttimeoutlen=80
    endif
    if has('nvim') || has('gui_running')
        return
    endif
    function! s:metacode(mode, key)
        if a:mode == 0
            exec "set <M-".a:key.">=\e".a:key
        else
            exec "set <M-".a:key.">=\e]{0}".a:key."~"
        endif
    endfunc
    for i in range(10)
        call s:metacode(a:mode, nr2char(char2nr('0') + i))
    endfor
    for i in range(26)
        call s:metacode(a:mode, nr2char(char2nr('a') + i))
        call s:metacode(a:mode, nr2char(char2nr('A') + i))
    endfor
    if a:mode != 0
        for c in [',', '.', '/', ';', '[', ']', '{', '}']
            call s:metacode(a:mode, c)
        endfor
        for c in ['?', ':', '-', '_']
            call s:metacode(a:mode, c)
        endfor
    else
        for c in [',', '.', '/', ';', '{', '}']
            call s:metacode(a:mode, c)
        endfor
        for c in ['?', ':', '-', '_']
            call s:metacode(a:mode, c)
        endfor
    endif
endfunc
 " Comment following line to disable meta key as alt
call Terminal_MetaMode(0)

endif



" smart case for / search
set ignorecase
set smartcase

" highlight all search matches
:set hlsearch

" highlight the next match while you're still typing out your search pattern
:set hlsearch incsearch

" set more visual hints in command-line mode
set wildmenu

" Indention Options
set autoindent " New lines inherit the indentation of previous lines
set expandtab " Convert tabs to spaces
set shiftwidth=4 " When shifting, indent using four spaces
set tabstop=4 " Indent using four spaces
set smarttab
set expandtab

" Enable hidden buffers
set hidden

" make scroll leave a margin for 3 lines
set scrolloff=3

" set updatetime to 1 second.This is used for CursorHold event
set updatetime=1000

" {{{ vimdebug
    " let g:termdebug_wide = 163
" }}}



" Elixir {{{
    let g:tagbar_type_elixir = {
        \ 'ctagstype' : 'elixir',
        \ 'kinds' : [
            \ 'f:functions',
            \ 'functions:functions',
            \ 'c:callbacks',
            \ 'd:delegates',
            \ 'e:exceptions',
            \ 'i:implementations',
            \ 'a:macros',
            \ 'o:operators',
            \ 'm:modules',
            \ 'p:protocols',
            \ 'r:records',
            \ 't:tests'
        \ ]
        \ }
" }}}



" YouCompleteMe {{{
    " To recompile YouCompleteMe:
    " in ~/.vim/plugged/YouCompleteMe for vim
    " in ~/.nvim/plugged/YouCompleteMe for nvim
    " python3 install.py --clang-completer  # for nvim
    " python3 install.py --clangd-completer  # for vim

    " To generate .ycm_extra_conf.py according to CMakeList.txt, run:
    " :YcmGenerateConfig

    let g:ycm_always_populate_location_list = 1
    " open keyword completion
    let g:ycm_seed_identifiers_with_syntax=1
    " let g:ycm_python_binary_path = 'python3'
    "blacklist for youcompleteme
    let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'gitcommit' : 1,
            \}
    let g:ycm_autoclose_preview_window_after_completion = 1

    " Let clangd fully control code completion
    let g:ycm_clangd_uses_ycmd_caching = 0
    " Use installed clangd, not YCM-bundled clangd which doesn't get updates.
    let g:ycm_clangd_binary_path = exepath("clangd")

    
    let g:ycm_disable_signature_help = 0
    let g:ycm_auto_trigger = 1

    " python completion settings
    " let g:ycm_python_interpreter_path = '/usr/bin/python'
    " let g:ycm_python_sys_path = []
    " let g:ycm_extra_conf_vim_data = [
      " \  'g:ycm_python_interpreter_path',
      " \  'g:ycm_python_sys_path'
      " \]
    let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py'
" }}}



" Fzf {{{ 
    " This is the default extra key bindings
    let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit',
      \ 'ctrl-f': 'read @/',
      \}

    " Default fzf layout
    " - down / up / left / right
    let g:fzf_layout = { 'up': '~40%' }

    " In Neovim, you can set up fzf window using a Vim command
    let g:fzf_layout = { 'window': 'enew' }
    let g:fzf_layout = { 'window': '-tabnew' }
    let g:fzf_layout = { 'window': 'belowright 10split enew' }

    " Customize fzf colors to match your color scheme
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

    " Enable per-command history.
    " CTRL-N and CTRL-P will be automatically bound to next-history and
    " previous-history instead of down and up. If you don't like the change,
    " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
    let g:fzf_history_dir = '~/.local/share/fzf-history'

    " help search command 
    command! -bang -nargs=* FindActions
      \ call fzf#vim#grep(
      \   'cat $HOME/Software/vim/vim_tip/find_actions '.shellescape(<q-args>), 1)

    " preview when fzf
    command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse']}), <bang>0)

    command! -bang -nargs=* Ag
    \ call fzf#vim#ag(<q-args>,
    \ <bang>0 ? fzf#vim#with_preview('up:60%')
    \ : fzf#vim#with_preview('right:50%:hidden', '?'),
    \ <bang>0)

    function!SearchChangesFun()
        redir => g:changes_text
        silent changes
        redir end
        
    endfunction

    command! -bang -nargs=* SearchChanges
    \ call fzf#vim#grep(
    \ 'git grep --line-number '.shellescape(<q-args>), 0,
    \ fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
" }}}



" easymotion {{{
    map <Leader> <Plug>(easymotion-prefix)
" }}}



" undotree {{{
if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif
" }}}



" Scratch {{{
    let g:scratch_persistence_file = "$HOME/Software/vim/Scratch"
    let g:scratch_no_mappings = 1
    let g:scratch_height = 15
    let g:scratch_autohide = 0
" }}}



" CtrlP {{{
    let g:ctrlp_extensions = [ 'line' ]
    nnoremap <c-f> :CtrlPLine %<CR>
    nmap <c-p> :CtrlP .<CR>
    " let g:ctrlp_map = '<c-p>'
    let g:ctrlp_working_path_mode=2
    let g:ctrlp_show_hidden = 1
" }}}



" {{{ ale
    " let g:ale_sign_error = 'âœ—'
    " let g:ale_sign_warning = 'âš '
    " " suppress the display of errors when you move the cursor onto their line (prevent cursor from disappearing)
    " let g:ale_echo_cursor = 0


    nmap <silent> <Space>ep <Plug>(ale_previous_wrap)
    nmap <silent> <Space>eN <Plug>(ale_previous_wrap)
    nmap <silent> <Space>en <Plug>(ale_next_wrap)

    " Available Linters: 'flake8', 'mypy', 'prospector', 'pycodestyle', 'pyflakes', 'pylint', 'pyls', 'pyre', 'vulture'
    let g:ale_linters = {
    \   'python': ['flake8','pylint'],
    \   'c':[],
    \   'cpp':[],
    \}

    let g:ale_fixer= {
    \   'python': ['autopep8'],
    \   'c':[],
    \   'cpp':[],
    \}

    " to suppress errors by flake8 globally,use OpenFlake8Config
    " add at the end of the error line `# noqa EXXX` XXX is num to suppress an
    " error there
" }}}



" {{{ neomake
    call neomake#configure#automake('nrwi', 500)
    " disable lint/syntax check
    let g:neomake_python_enabled_makers = []
    let g:neomake_c_enabled_makers = []
    let g:neomake_cpp_enabled_makers = []
    let g:neomake_javascript_enabled_makers = []
" }}}



" {{{ vim-youdao-translater
    " vnoremap <silent> <c-h>c :<C-u>Ydv<CR>
    nnoremap <silent> <Space>hc :<C-u>Ydc<CR>
    noremap <Space>htc :<C-u>Yde<CR>
" }}}


" {{{ flake8
    " let g:flake8_show_in_gutter=1  " show signs in the gutter
    " let g:flake8_show_in_file=1  " show marks in the file
" }}}



" {{{ snippets
    " snippets of vim-snippets are in folders under:
    " /home/ban/.vim/plugged/vim-snippets/UltiSnips
    " /home/ban/.vim/plugged/vim-snippets/snippets
    "
    " custom snippets are in folders under:
    " /home/ban/.vim/UltiSnips
    " Use :UltiSnipsEdit to edit custom snippet with current file type.
    "
    " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger="<c-v>"
    let g:UltiSnipsJumpForwardTrigger="<c-f>"
    let g:UltiSnipsJumpBackwardTrigger="<c-b>"

    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"
" }}}



" {{{ vim-autoformat
    let g:formatdef_clangformat ="'clang-format -lines='.a:firstline.':'.a:lastline.' --assume-filename=\"'.expand('%:p').'\" -style=\"{ AlignTrailingComments: true, '.(&textwidth ? 'ColumnLimit: '.&textwidth.', ' : '').(&expandtab ? 'UseTab: Never, IndentWidth: '.shiftwidth() : 'UseTab: Always').'}\"'"
    nnoremap ,f :Autoformat<CR>
    xnoremap ,f :Autoformat<CR>
" }}}



" {{{ neoformat
    " nnoremap ,f :Neoformat<CR>
    " xnoremap ,f :Neoformat<CR>
    
    " following command contains bug: after command, ,cc will be mapped to cpp
    " run command

" }}}



" {{{ vimux
    " when origin filetype==""
    let g:VimuxReplDefaultFiletype='python'
    let g:VimuxOrientation = "h"
    let g:VimuxHeight = "50"

    nmap <space>: :call VimuxPromptCommand()<CR>
    nmap <space>v: :call VimuxPromptCommand()<CR>
    nmap <space>vo :call VimuxOpenRunner()<CR>
    nmap <space>vl :call VimuxRunLastCommand()<CR>
    nmap <space>vc :call VimuxCloseRunner()<CR>
    nmap <space>vr :call VimuxRunCommand("!!\n")<CR>
    function! VimuxSlimeVisual()
        call VimuxRunCommand(@v)
    endfunction
    vmap <space>vs "vy :call VimuxSlimeVisual()<CR>
    function! VimuxSlimeNormal()
        call VimuxRunCommand(getline("."))
    endfunction
    nmap <space>vs :call VimuxSlimeNormal()<CR>
    " toggle using vim for repl in another pane
    function! VimuxForRepl()
        if !exists("b:VimuxForReplFlag")
            let b:VimuxForReplFlag=0
        endif

        if b:VimuxForReplFlag
            iunmap <buffer> <enter>
            vunmap <buffer> <enter>
            nunmap <buffer> <enter>
            let b:VimuxForReplFlag=0
        else
            inoremap <buffer> <enter> <c-o>$<c-o>:call VimuxSlimeNormal()<CR><enter>
            vnoremap <buffer> <enter> "vy :call VimuxSlimeVisual()<CR>
            nnoremap <buffer> <enter> :call VimuxSlimeNormal()<CR>j

            let b:VimuxForReplFlag=1

            if(&filetype=='')
                exec "set filetype=" . g:VimuxReplDefaultFiletype
            endif

            " set initial code for specific filetype
            if(&filetype=='python')
                VimuxRunCommand("python3")
            endif

            " if(&filetype=='vim') see function VimEnterExec
        endif
    endfunction
    nmap <space>vp :call VimuxForRepl()<CR>
" }}}



" {{{ vim-gdb
    if has('nvim')
        nnoremap ,qq :GdbSaveBreakpoints<CR>:sleep 1<CR>:GdbDebugStop<CR>
        tnoremap <c-b> save breakpoints .gdb_breakpoints<CR>q<CR>
    else
        nnoremap ,qq :call TermDebugSendCommand('save breakpoints .gdb_breakpoints')<CR>:call TermDebugSendCommand('q')<CR>
        tnoremap <c-b> save breakpoints .gdb_breakpoints<CR>q<CR>
    endif
" }}}


" {{{ CompleteParameter.vim
" remap ( for conflict with plug delimitMate
    " imap <expr> (
    "         \ pumvisible() ?
    "         \ complete_parameter#pre_complete('()') :
    "         \ "\<Plug>delimitMate("
    " imap <expr>(
          " \ pumvisible() ?
          " \ complete_parameter#pre_complete("()") :
          " \ (len(maparg('<Plug>delimitMate(', 'i')) == 0) ?
          " \ "\<Plug>delimitMate(" :
          " \ '('
" }}}


